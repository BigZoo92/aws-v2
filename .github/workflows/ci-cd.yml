name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
  release:
    types: [created]

defaults:
  run:
    shell: bash

jobs:
  # -----------------------------
  # CI JOB : INSTALL + LINT + TEST + BUILD
  # -----------------------------
  setup:
    name: 📦 Setup environment & install deps (cached)
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Setup Node.js & PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: ✨ Cache PNPM deps
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 📆 Install deps
        run: pnpm install

  lint:
    name: 🧼 Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter frontend lint
      - run: pnpm --filter backend lint

  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter frontend test
      - run: pnpm --filter backend test

  build:
    name: 🏗 Build + Docker
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter frontend build
      - run: pnpm --filter backend build

      - name: 🐳 Docker build frontend
        run: docker build -f frontend/Dockerfile -t test-frontend .

      - name: 🐳 Docker build backend
        run: docker build -f backend/Dockerfile -t test-backend .

  # -----------------------------
  # CD JOBS : deploy depending on environment
  # -----------------------------
  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy to DEV
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -d ~/app-dev/.git ]; then
                rm -rf ~/app-dev
                git clone https://github.com/${{ github.repository }} ~/app-dev
            fi
            cd ~/app-dev
            echo "${{ secrets.ENV_DEV }}" > .env
            git pull origin develop
            docker compose down
            docker compose up -d --build
          EOF

  deploy-preprod:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy to PREPROD
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -d ~/app-preprod/.git ]; then
                rm -rf ~/app-preprod
                git clone https://github.com/${{ github.repository }} ~/app-preprod
            fi
            cd ~/app-preprod
            echo "${{ secrets.ENV_PREPROD }}" > .env
            git pull origin main
            docker compose down
            docker compose up -d --build
          EOF

  deploy-prod:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      - name: Deploy to PROD
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -d ~/app-prod/.git ]; then
                rm -rf ~/app-prod
                git clone https://github.com/${{ github.repository }} ~/app-prod
            fi
            cd ~/app-prod
            echo "${{ secrets.ENV_PROD }}" > .env
            git fetch --all --tags
            git checkout ${{ github.ref_name }}
            docker compose down
            docker compose up -d --build
          EOF
