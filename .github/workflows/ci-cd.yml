name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # -----------------------------
  # CI JOB : INSTALL + LINT + TEST + BUILD
  # -----------------------------
  setup:
    name: 📦 Install dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.deps.outputs.cache-hit }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: 📦 Install dependencies
        id: deps
        run: pnpm install

  lint:
    name: 🧼 Lint (frontend + backend)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter frontend lint
      - run: pnpm --filter backend lint

  test:
    name: 🧪 Tests (frontend + backend)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter frontend test
      - run: pnpm --filter backend test

  build:
    name: 🏗 Build + Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm --filter frontend build
      - run: pnpm --filter backend build

      - name: 🐳 Docker build frontend
        run: docker build -f frontend/Dockerfile -t test-frontend .

      - name: 🐳 Docker build backend
        run: docker build -f backend/Dockerfile -t test-backend .

  # -----------------------------
  # CD JOB : DEPLOY TO EC2 (ONLY IF MAIN)
  # -----------------------------
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app
            git pull origin main || git clone https://github.com/${{ github.repository }} .
            docker compose down
            docker compose up -d --build
          EOF
